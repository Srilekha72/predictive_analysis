# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a6rf8_Thm7U6MVER1_UScpx0PUEiozxF
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

df = pd.read_csv('booking.csv')
df.columns.tolist()

if df.isna().sum().sum()>0:
  df.dropna(inplace=True)

M = df.drop(['type of meal','room type', 'market segment type','booking status','Booking_ID','date of reservation'], axis=1)
m = df.drop('booking status', axis=1)
n = df['booking status']

for j in M:
  plt.figure(figsize = (4,4))
  sns.boxplot(data=M[j])
  plt.title(j)
  plt.ylabel('Values')
  plt.xticks(rotation = 60)
  plt.show()

def deal_outliers(df,columns):

  for c in columns:
    v1 = df[c].quantile(0.25)
    v3 = df[c].quantile(0.75)
    IQR = v3 - v1
    low_bound = v1 - 1.5 * IQR
    up_bound = v3 + 1.5 * IQR
    med = df[c].median()
    df[c] = np.where((df[c] < low_bound) | (df[c] > up_bound), med, df[c])

  return df

df = deal_outliers(df,M)
M = df.drop(['type of meal','room type', 'market segment type','booking status','Booking_ID','date of reservation'], axis=1)
m = df.drop('booking status', axis=1)
n = df['booking status']
for j in M:
  plt.figure(figsize = (4,4))
  sns.boxplot(data=M[j])
  plt.title(j)
  plt.ylabel('Values')
  plt.xticks(rotation = 40)
  plt.show()

le = LabelEncoder()
df['type of meal'] = le.fit_transform(df['type of meal'])
df['room type'] = le.fit_transform(df['room type'])
df['market segment type'] = le.fit_transform(df['market segment type'])
df['booking status'] = le.fit_transform(df['market segment type'])
df['Booking_ID'] = le.fit_transform(df['market segment type'])
df['date of reservation'] = le.fit_transform(df['market segment type'])
m = df.drop('booking status', axis=1)
n = df['booking status']
if df.duplicated().sum()>0:
  df.drop_duplicates(inplace = True)
m_train , m_test, n_train, n_test = train_test_split(m,n,test_size = .7, random_state = 55)
cf = LogisticRegression()
cf = cf.fit(m_train,n_train)
mode= cf.predict(m_test)
print('estimated',mode)
print()
print('try',n_test)

accu= accuracy_score(n_test,mode)
prec = precision_score(n_test,mode, average = 'weighted')
reca = recall_score(n_test,mode, average = 'weighted')
f = f1_score(n_test,mode, average = 'weighted')

conf = confusion_matrix(n_test,mode)
print('accuracy: ',accu)
print('precision: ',prec)
print('recall: ',reca)
print('f: ',f)
print('conf_matrix: ',conf)